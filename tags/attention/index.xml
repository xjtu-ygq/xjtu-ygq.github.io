<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Attention on Yin Guangqi</title>
    <link>https://xjtu-ygq.github.io/tags/attention/</link>
    <description>Recent content in Attention on Yin Guangqi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 02 Dec 2022 21:48:16 +0800</lastBuildDate><atom:link href="https://xjtu-ygq.github.io/tags/attention/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Transformer的Pytorch实现</title>
      <link>https://xjtu-ygq.github.io/posts/transformer%E7%9A%84pytorch%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 02 Dec 2022 21:48:16 +0800</pubDate>
      
      <guid>https://xjtu-ygq.github.io/posts/transformer%E7%9A%84pytorch%E5%AE%9E%E7%8E%B0/</guid>
      <description>写在前面 Transformer主要分为图示12块，详细介绍请参考 The Annotated Transformer The Annotated Transformer的中文注释版 前置知识：切记了解pytorch的class类使用规则 class定义-&amp;gt;对象-&amp;gt;</description>
    </item>
    
    <item>
      <title>Attention Is All You Need</title>
      <link>https://xjtu-ygq.github.io/posts/transformer/</link>
      <pubDate>Thu, 01 Dec 2022 18:53:25 +0800</pubDate>
      
      <guid>https://xjtu-ygq.github.io/posts/transformer/</guid>
      <description>Encoder+Decoder Outputs是自己的输出，只在训练时加入，应用时不加入 $sub-layer=LayerNorm(x+SubLayer(x))$ Encoder的输出作为Decoder多头注意力机制的Q、K 激活函数采用Relu Attention 多头注意力机制是将Q、K、V进行全连接之后再进行h层的注意</description>
    </item>
    
  </channel>
</rss>
